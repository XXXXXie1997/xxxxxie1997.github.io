<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>老咸鱼的水洼</title>
    <link>https://xxxxxie1997.github.io/</link>
    <description>Recent content on 老咸鱼的水洼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 20 Apr 2020 17:33:30 +0800</lastBuildDate>
    
	<atom:link href="https://xxxxxie1997.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浏览器渲染及css动画相关总结</title>
      <link>https://xxxxxie1997.github.io/post/12th/</link>
      <pubDate>Mon, 20 Apr 2020 17:33:30 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/12th/</guid>
      <description>浏览器渲染的步骤：  根据 html 内容构建 HTML 树（DOM）。 根据 css 内容构建 css 树（CSSOM）。 将两棵树合并，得到一棵“渲染树”（render tree）。 对页面进行布局（layout）：文档流、盒模型等计算大小和位置。 绘制（paint）：把页面中元素的边框颜色，文字颜色，阴影等绘制出来。 合成（composite）：根据层叠样式表中层叠关系展示最终页面。  有三种更新方式：
 JS/CSS&amp;gt;样式&amp;gt;布局&amp;gt;绘制&amp;gt;合成 JS/CSS&amp;gt;样式&amp;gt;绘制&amp;gt;合成 JS/CSS&amp;gt;样式&amp;gt;合成  在 CSS 动画中，每一种属性都会触发不同的更新方式，具体哪一种属性触发哪种更新方式，可以查阅csstriggers。
css 动画的两种做法：  使用 transform，一般要配合一定触发条件如 hover，有四种常用取值：   位移translate:可以设定 xy 轴的方向，也可以设置正负值。语法：translateX/Y(100px); 缩放scale：语法为scale(x.x);x.x 为缩放倍数。 旋转rotate：语法为rotate(Xdeg) X 为旋转角度，方向为顺时针。取负值为逆时针旋转。 倾斜skew：就是倾斜。。难以言喻，试试就知道了，取值范围同 translate。  使用 animation：  首先，在需要做动画的元素的样式中添加animation，可以设置动画的各种属性，animation 的语法为:animation:动画名称 时长 过渡方式 延迟 次数 方向 填充模式 是否暂停;
 动画名称：顾名思义随便起了叫什么都行。。 时长：单位为 s 或 ms。 过渡方式：取值和 translation 一样，如translation或linear。 延迟：同样为 s 或 ms。 方向：如果默认方向为 A&amp;gt;B，那么：reverse反向进行 B&amp;gt;A、alternate反复进行，由 A 开始 A&amp;gt;B&amp;gt;A&amp;gt;B&amp;gt;A、alternate-reverse反向的反复进行，由 B 开始 B&amp;gt;A&amp;gt;B&amp;gt;A&amp;gt;B。 填充模式：取值有none``forwards``backwards``both等，具体使用方式还需参阅文献。 是否暂停：暂时用不到。。学习 js 后再总结。  其次，添加新的样式@Keyframes 动画名称声明动画中的关键帧，浏览器会自动补充缺失帧。 @keyframes 主要有两种使用方式：</description>
    </item>
    
    <item>
      <title>CSS布局3：grid布局</title>
      <link>https://xxxxxie1997.github.io/post/11th/</link>
      <pubDate>Sat, 18 Apr 2020 19:21:38 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/11th/</guid>
      <description>首先要说明：grid 布局的兼容性一般，所以这个布局虽然极其方便且灵活，但仍然不是目前主流布局，所以还是将就 flex 一把梭。
grid 布局的特性：   grid 布局和 flex 一样主要分为容器 container 和内容 items，只需要在元素的样式中添加display:grid;即可使用。
  该布局不同于以往布局，该布局方式为将页面划分为多个区域，类似一个表格，所以编辑起来非常灵活。但是比较抽象，以我浅显的理解还无法做出条理清晰的总结。
  grid 布局的相关属性：
  grid-template-columns:和grid-template-rows:可以将页面分割为一个几行几列的表格，值的单位可以使用 px/vw/%/fr 等。（fr：将剩余空间平均分为“总 fr 数”份，每个以 fr 做单位的元素分得 n 份）。
  grid-column(row)-start(end):N;N 为一个数字，可以指定赋予该属性的元素在分割出的表格里起（止）分别为表格中的第几条线。正因为这个属性，该布局方式才如此灵活。
    grid-gap:可以设置 grid 元素间空隙的大小。
  grid-template-areas: 更加奇妙且灵活的分割方式，只需要取值输入多个字符串，便能将页面分割。 例：
  .grid { grid-template-areas: &amp;#34;1 2 3 4 5&amp;#34; &amp;#34;1 2 3 4 5&amp;#34; &amp;#34;1 2 3 4 5&amp;#34;; } 便能将页面分割为三行五列的表格，选择区域&amp;quot;1&amp;quot;时，即选择字符串中所有带 1 的部分，即第一列,可以通过修改字符串内容，达到选择不规则形状区域的功能。</description>
    </item>
    
    <item>
      <title>CSS常用布局2：flex布局</title>
      <link>https://xxxxxie1997.github.io/post/10th/</link>
      <pubDate>Thu, 16 Apr 2020 21:02:00 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/10th/</guid>
      <description>flex 布局 flex 布局的学习内容主要分为两个部分：
容器 container： container 内为弹性流（flex-flow），与文档流（normal-flex）不同，容器内的内容为弹性盒，弹性盒在内容放不下时默认不会换行，而是将自身进行挤压。
container 样式：
  display:flex;：使容器占满空间后另起一行（值为 inline-flex 时不换行。）
  flex-direction设定主轴方向：row为横向，column为纵向（若加-reverse后缀，则改为反向。）
  flex-wrap:(no)wrap：内容放不下时（不）换行。
  justify-content为主轴对齐方式，有如下几个值：
   flex-start：将内容向主轴起点方向对齐。 flex-end：将内容向主轴终点方向对齐。 space-between：将剩余空间放在内容间的缝隙里。 space-around：将剩余空间放在内容的周边。 space-evenly：将剩余内容平均分配（很少用）。 center：将内容居中对齐。    align-items：次轴对齐，用法同justify-content类似，不同之处为该元素默认值为stretch：将所有内容拉伸至最长内容相同的高度。
  align-content多行内容对齐方式，可赋予值与align-items相同，但决定的事不同高度的元素在主轴的对齐方式。
  flex-flow：此属性为flex-direction和flex-wrap的组合。语法：flex-flow:row-reverse wrap;
  内容 items items 样式：
  order：给内容排序，赋予 order 元素会按 order 值从小到大排列，值一般为整数，-1 为最小（也就是排第一）。
  flex-grow：将多余的空间按一定比例分给内容，默认值为 0（即不分配空间），值越大，分得的空间就越多。
  flex-shrink：当没有足够的空间时，值越大的元素挤压的越明显（默认值为 1，即空间不足时等比缩小，值为 0 时不缩小）。
  flex-basis：控制元素基准宽度（默认值为 auto，实际直接给元素 width 也是一样的）。</description>
    </item>
    
    <item>
      <title>CSS常见布局1：float布局</title>
      <link>https://xxxxxie1997.github.io/post/9th/</link>
      <pubDate>Wed, 15 Apr 2020 20:30:48 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/9th/</guid>
      <description>float 布局： 步骤：
 在子元素上添加属性float:left;和width 给添加 float 属性元素的父元素赋予clearfix类，然后再样式表中编辑如下内容：  .clearfix::after { content: &amp;#34;&amp;#34;; display: block; clear: both; } 这个 CSS 样式可以让父元素包裹住那些因为赋予float样式而脱离文档流的元素。 很关键，一定要写！ 很关键，一定要写！ 很关键，一定要写！
 如果图片下面多出来一部分内容如背景色，使用vertical-align:middle;即可消去多于内容（没有为什么，目前死记硬背即可。） 当 border 因为占页面空间而扰乱了布局时，可以将 border 改为outline，这样 border 就不会占据盒模型空间了。 如果要做平均分布，在内容中加入一个任意名字的新图层（标签如 div），赋予一个-margin属性，可以将空间推宽。（尚未研究明白，后续会继续学习）  前辈的经验：
 一行的最后一个元素不设width值或者留一些空间以备不时之需。 float 布局不需要考虑响应式，因为这个布局专为 IE 浏览器准备而手机一般没有 IE 浏览器，只有傻子采用 float 布局做手机页面。 IE6/7 存在双倍 margin 的 bug，解决方法：   针对 IE6/7 把元素的 margin 改为一半。 将元素改为 inline-box 元素（加一个display:inline-box;）  只需要给页面加上头尾（header和footer），即可满足 pc 页面需求。 float 布局需要程序猿自己计算各元素宽度，使用起来不灵活。 CSS 没有为什么。  </description>
    </item>
    
    <item>
      <title>CSS布局</title>
      <link>https://xxxxxie1997.github.io/post/8th/</link>
      <pubDate>Wed, 15 Apr 2020 20:11:12 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/8th/</guid>
      <description>css 布局主要分为两种类型：
 固定宽度布局：一般宽度为 960、1000、1024px，一般用于 pc 页面。 不固定宽度布局：根据文档流原理自动布局，一般应用于手机页面。 （响应式布局：在 pc 上为固定宽度，在手机上则不固定。） 注意：文档流本来就是自适应，不需要加额外的样式。  布局的思路：
 对于老手来说，一般按从大到小设计，先确定大局，后完善每个小部分的布局。 对于新手来说，一般按从小到大设计，先完成小布局，然后将多个小布局组合成为大布局。  关于使用哪种布局，具体情况要看需求，根据所学整理出一张思维导图： 布局是前端学习过程中一个非常重要的部分，学习的时候一定要细心。</description>
    </item>
    
    <item>
      <title>CSS文档流与盒模型</title>
      <link>https://xxxxxie1997.github.io/post/7th/</link>
      <pubDate>Tue, 14 Apr 2020 17:01:40 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/7th/</guid>
      <description>文档流（normal-flow）：通俗的理解为页面中文档流动的方向。 以前区分行内元素和块元素（浏览器赋予默认属性），现在都可以通过修改样式表内display属性达到想要的效果，基本已经不需要区分了。
 文档的流动方向：   inline 元素：从左到右，到达最右边后换行。 block 元素：从上到下，每一个都另起一行。 inline-block 元素：从左到右，但当内容不够容下标签所有内容是会换行。  文档在页面中的宽度：   inline元素：宽度为内部所有 inline 元素的和，该元素不能使用width属性指定宽度。 block元素：默认自动计算宽度，可以用width指定，不写默认width为 auto （注意：并非 100%而是 auto，若不是特殊情况，尽量不要写 100%）。 inline-block元素：结合前两者特点，默认自动根据内容计算宽度，也可以指定 width。  文档在页面中的高度：   inline元素的实际高度为行高。不接受width和height属性，但依然可以赋予其他属性（如内外边距）。 block元素的实际高度由内部文档流元素决定，块元素会将内部的所有文档流元素包起来，可以使用height指定高度。 inline-block元素和 block 元素基本相同，也可以通过height属性指定高度。  存在一些特殊情况，如 block 元素的内容高度超过了 height 属性赋予的高度（文档溢出&amp;ndash;overflow）。   默认值为overflow=visiable;，使得超出的内容可见（内容会从block元素边框溢出）。 overflow: scroll;,该值可以给块元素添加滚动条方便用户通过滚动条浏览块元素内的内容，但很难受的是不管有没有溢出都会有滚动条，很丑…… 所以一般使用 overflow: auto;会自动根据内容长短添加滚动条，这个是目前最常用的一种处理方式。 也可以使用overflow-x或y 可以分别设置横向，纵向的溢出内容，但不是很常用因为比较麻烦。  CSS 盒模型： CSS 盒模型分为两种：
 内容盒 content box 边框盒 border box 可通过box-sizing属性设置盒模型类型。 盒模型由content、padding、border、margin四个部分组成。 区别： content box 的宽高为盒内部元素内容宽高总和，即宽高只包含content。 border box 的宽高为边框的宽高，即宽高为border、padding和content的总和。所以在没设置边框和内边距时，两模型效果基本相同。  关于盒模型的学问还有很多，在以后学习过程中有机会再总结吧。</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://xxxxxie1997.github.io/post/6th/</link>
      <pubDate>Mon, 13 Apr 2020 10:29:25 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/6th/</guid>
      <description>a 标签：
a 标签为超链接，它的作用是可以跳转到外部页面或跳转至页面内部的锚点。 a 标签可加入的属性：
   href指定连接方向，（值可为外部连接，也可为内部 id 以及邮箱、电话等）。 target通过赋予值可以决定跳转在哪里打开，默认值为_self即当前页面（_blank为空白页打开，_top在顶层页面打开，_parent在父级页面打开）。也可通过给 iframe 命名达到在 iframe 中打开的效果。 download赋予该属性的连接会被下载。   img 标签：
img 标签用于发出一个 get 请求，向用户展示一张图片。 可加入的属性：
   src图片路径（这个属性必须有，否则会报错）。 alt在图片加载失败后，会显示 alt 中的内容。 height 和 width决定图片的高和宽，值可以为固定像素，也可以为百分比（宽和高如果只写一个值，另一个值会根据图片原始比例自动适应，两个都写可能导致图片变形）。 （响应式：img {max-width:100%}意为最大宽度为屏幕的 100%，大小会自动适应，可用于移动端页面开发。）  table 标签：
table 为表格标签，一般由thead tbody tfoot组成。（都不写的话内容会自动写入 tbody） 大致格式为：
&amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;横表头1&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;横表头2&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;横表头3&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;竖表头1&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt;值1.1&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值1.2&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值1.3&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;竖表头2&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt;值2.1&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值2.2&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值2.</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://xxxxxie1997.github.io/post/5th/</link>
      <pubDate>Sun, 12 Apr 2020 14:08:00 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/5th/</guid>
      <description>  HTML 是李爵士（Tim Berners-Lee，也是 Web 的发明者）和他的同事在 1990 年创立的超文本标记语言。
  html 的起手式：
  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh-CN&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;网页的标题&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; 网页的主要内容 &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 常用的章节标签：   h1~h6分别表示 1 至 6 级标题 section表示新章节 p为段落 header为网页头部 footer为网页底部 main为网页的主要内容 aside为网页的旁支内容 div将网页内容划分为几个部分  全局属性（指所有标签都能添加的属性）   class &amp;ndash;给标签赋予一个类 contenteditable &amp;ndash;添加该属性的标签可以在页面中被编辑 hidden &amp;ndash;添加该属性的标签内容会被隐藏 id &amp;ndash;给标签赋予一个 id style &amp;ndash;给标签设置样式 tabindex &amp;ndash;添加该属性的标签内容在页面中可以被 tab 选中，属性值为数字，数字越小越先被选中（0 为最后被选中） tittle &amp;ndash;属性会将完整内容显示在页面上  常用的内容标签：   ol+li &amp;ndash;有序列表，li 包裹在 ol 中，是有序列表的内容 ul+li &amp;ndash;无序列表，用法同有序 dl+dt+dd &amp;ndash;描述列表，dt 为被描述内容，dd 为该内容的描述 pre &amp;ndash; 被 pre 包裹的内容，所有的空格都将保留 code &amp;ndash;被 code 包裹的内容会使用等宽字体 hr &amp;ndash;水平分割线 br &amp;ndash;换行 a &amp;ndash;超链接 em &amp;ndash;强调语气 strong &amp;ndash;强调内容本身 quote &amp;ndash;内联引用 blockquote &amp;ndash;块引用  </description>
    </item>
    
    <item>
      <title>如何用 hugo 搭建个人博客</title>
      <link>https://xxxxxie1997.github.io/post/4th/</link>
      <pubDate>Sat, 11 Apr 2020 11:02:10 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/4th/</guid>
      <description>首先当然是安装hugo了^_^。安装完后运行hugo version可以检查是否成功安装
  通过运行hugo new site xxxx.github.io-creator在当前目录下建立新的hugo目录，名为xxxx.github.io-creator （xxxx为github用户名，全小写。）
  进入xxxx.github.io-creator目录，在目录中建立git库(git init)
  运行git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke，从github下载名为ananke的主题
  运行echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml，将主题信息添加到配置文件中
  运行hugo new post/blog01.md，在当前目录下的post目录中新建 blog01.md
  进入post目录中，运行code blog01.md，打开blog01进行编辑
  修改title为任意内容，draft属性改为false（draft属性决定文件是否保存为草稿）
  哒哒哒的码入内容……
  码完保存后，运行hugo -D建立页面，该页面会以文件夹的形式出现在xxxx.github.io-creator/public/post中
  运行hugo server，启动hugo服务器（也可以省略步骤10，运行`hugo server -D即可），便可从本地查看页面效果。若要配置新主题，需自行琢磨。。
  回到xxxx.github.io-creator目录，运行touch .gitignore并打开，将public文件夹输入，从git本地库中忽视该文件夹
  访问github，建立新的远程库，名为xxxx.github.io （xxxx同样为用户名小写，不能出错）
  进入public目录
  复制远程库SSH地址，运行git remote add oringin SSH地址将本地库public与远程库xxxx.</description>
    </item>
    
    <item>
      <title>git远程仓库</title>
      <link>https://xxxxxie1997.github.io/post/3rd/</link>
      <pubDate>Sat, 11 Apr 2020 10:21:45 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/3rd/</guid>
      <description>git远程仓库的操作 听着是不难轮到自己操作着实迷惑了很久，同时也令我警觉起来，常言道万丈高楼平地起，打基础的时候可千万不能糊弄呀 （= n=）
将本地仓库的文件同步到远程仓库 首先到github建立新的远程仓库，得到SSH链接 切换到想要上传的目录下，在确定本地文件已提交后，运行git remote add 远程仓库名 SSH地址将本地仓库与远程仓库联系起来 运行git push -u 远程仓库名 SSH地址将本地库的当前分支上传至对应远程仓库 （如果要上传其他分支，通过git branch建立，git checkout切换至其它分支，再push）
这个操作只有第一次需要，后续上传只需运行git push即可
将远程仓库的文件同步到本地仓库 通过git clone 远程仓库名可以将远程仓库中的内容同步到本地仓库（所有分支）
容易忽视的问题：对文件的所有操作都需要标记后提交才会生效（包括文件的删除和重命名等）如果没有对所有的操作进行提交，便无法push，需要注意</description>
    </item>
    
    <item>
      <title>git本地仓库</title>
      <link>https://xxxxxie1997.github.io/post/2nd/</link>
      <pubDate>Fri, 10 Apr 2020 16:36:26 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/2nd/</guid>
      <description>首先还是从简单的指令开始学习的，这些指令理解起来同样没什么困难，真正的困难时容易在需要使用时想不起来应该使用哪一个，所以每过一段时间一定要多复习几次，得过且过就糟糕了
git init &amp;ndash;git命令的基础，初始化git，意为在初始目录下创建.git目录
（一定注意确保当前目录是所需目录，否则小朋友会有很多问号）
git add 路径 &amp;ndash;描述哪些路径是我所需要提交的
（可通过建立.gitignore文件来忽视对一些文件的描述，在该文件中输入需要忽视的文件名即可，这些文件不会被提交）
git commit -m 字符串 &amp;ndash;提交当前被描述过的文件并说明提交理由（字符串中有空格需引号括起来）
git commit -v &amp;ndash;使用-v会在提交之前回顾文件的改动。（推荐）
注意：一定要先描述哪些路径是需要提交的之后再提交，也就是需要先add后commit才行
（可通过git status查看文件当前状态，当前未描述会标红，反之标绿）
git reset --hard aaaaaa（aaaaaa为版本号，版本号没有固定长度，只需唯一即可） &amp;ndash;使用该命令可以在提交过的各个版本中左右横跳。
可以使用git log来查看提交后的版本，用git reflog查看版本的所有变动（包括改动后的版本）
注意：在reset --hard aaaaaa之前，一定要通过status查看当前文件描述状态，这些文件要么没有描述过，要么已经上传完成，如果是描述过但没有上传（也就是status标绿的状态）那么在reset后，这些文件将会消失
git branch X &amp;ndash;基于当前内容创建平行分支X（X为分支名），使用branch命令可以做到针对不同需求同时开发
git branch -d X &amp;ndash;删除X分支及其内容
git checkout X &amp;ndash;切换至之前创建的X分支最后一次提交的状态
若要切换回主线，只需git checkout master即可
git branch后不加参数可以查看当前所在分支以及分支数
git merge &amp;ndash;合并分支：
1.通过checkout切换至想要保留的分支（一般为master）
2.运行git merge 想要合并的分支名
注意：如果多条分支对同一文件的同一行进行了不同的修改，会导致冲突。命令行中的conflict提示一定要看，很关键
冲突的解决方法：
1.使用git status -sb查看到底是哪一个或哪些文件冲突
2.打开冲突的文件，在文件中搜索====，可以找到冲突位置
3.在====的上下两部分中选择需要保留的代码（当然全部保留也可以）
4.修改完后删除如&amp;laquo;&amp;laquo;、====、等用于提示冲突的多于代码
5.使用git add标记修改后的文件
6.再次使用git status -sb查看下一个冲突文件的文件名</description>
    </item>
    
    <item>
      <title>命令行入门</title>
      <link>https://xxxxxie1997.github.io/post/1st/</link>
      <pubDate>Fri, 10 Apr 2020 08:36:26 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/1st/</guid>
      <description>作为第一课相对来讲还是比较简单，不理解的东西较少。
第一天主要学习命令行各种命令缩写，含义，以及其在bash中如何使用
基础命令：
pwd &amp;ndash;当前目录绝对路径
ls &amp;ndash;当前路径内容
ls 路径名 &amp;ndash;查看指定路径所有文件
ls -a 路径名 &amp;ndash;指定路径全部内容（包括隐藏文件）
cat 路径 &amp;ndash;查看指定路径全部内容
head 路径 -n X（X为数字） &amp;ndash;查看指定路径前X行内容
tail 路径 -n X（X为数字） &amp;ndash;查看指定路径后X行内容
less 路径 &amp;ndash;以可滚动页面查看指定路径内容
clear &amp;ndash;清屏
touch 文件名 &amp;ndash;若当前目录没有该文件名文件，创建该文件，若有同名文件，更新其修改时间。
echo XXX（任意内容） &amp;gt;文件名 &amp;ndash;若目录中没有同名文件，创建该文件，并在文件内输入XXX，若有同名文件，会以XXX覆盖同名文件内容，需要注意
echo XXX &amp;gt;&amp;gt; 文件名 &amp;ndash;在该文件中添加XXX内容
echo -e &amp;quot;11111/n22222&amp;quot; &amp;gt;&amp;gt; 文件名 &amp;ndash; 在文件中添加两行内容，内容为：
“11111
22222”
其中，/n代表回车（换行）
mkdir 文件夹名 &amp;ndash;在当前路径下建立新文件夹
mkdir -p a/b/c a/d/c &amp;ndash;在当前目录下建立深层目录
以上面指令为例：此指令含义为在当前目录下简历a目录，在b、d目录下各建立一个c目录
cp &amp;ndash;copy即复制
例：
cp a.txt b.txt &amp;ndash;将a.txt中的内容复制到b.txt中</description>
    </item>
    
  </channel>
</rss>