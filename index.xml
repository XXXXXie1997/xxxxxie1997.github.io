<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>老咸鱼的水洼</title>
    <link>https://xxxxxie1997.github.io/</link>
    <description>Recent content on 老咸鱼的水洼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 01 Jul 2020 11:32:40 +0800</lastBuildDate>
    
	<atom:link href="https://xxxxxie1997.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浅析MVC</title>
      <link>https://xxxxxie1997.github.io/post/23th/</link>
      <pubDate>Wed, 01 Jul 2020 11:32:40 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/23th/</guid>
      <description>MVC 将代码分为 M（数据模型）V（视图）C（控制器）三类对象。
 M、V、C 三个对象分别做什么？ M：模型（model）用于封装与程序逻辑相关的数据以及对数据的处理方法，会有一个或多个视图（view）监听此模型。模块中的数据类代码可以放入 M 中。
const m = { data: 巴拉巴拉, name: 乌拉, }; V：视图（view）是程序在屏幕上的表示，是用户最直观看到的部分，显示的的是模型（model）的当前状态。
const m = { html: ` &amp;lt;section&amp;gt; &amp;lt;div class=&amp;#39;x&amp;#39;&amp;gt;RUA&amp;lt;/div&amp;gt; &amp;lt;/section&amp;gt; `, }; C：控制器（controller）定义用户界面对用户输入的响应方式，起到不同层面间的组织作用，用于控制程序的流程，它用于处理用户的行为和数据（model）的改变。
const c = { method:{ 用户戳了哪里，做什么 } } 用户操作界面时，通过 C 中的响应方式，使得 M 产生变化，V 应当产生响应的更新，显示出新的内容。
 EventBus 的作用是什么？有哪些 api？ 将所有的对象看做一个一个的点，如果想要进行单个或多个点之间的通信，最好的方法是找出一个专门的点负责这些点之间的通信。
这个点就是 eventBus，它负责对象与对象（单个或多个）之间的通信。
使用 jquery 为例：声明的 eventBus 本身是一个空对象，但其中恰巧包含很多 api 例如 on、off、trigger 等，那么这个对象就可以作为其他对象间通信用的对象了。例如在模型中创建了一个方法，这个方法触发时 eventBus 就会大吼一声。
此时只要另一边监听 eventBus 这一声，再给出一定的响应，对象间的通信就完成了，唉就好比打了个电话。
 什么是表驱动编程？ 在写代码的过程中总会遇到“大批代码长得很像，但实际不重复”的情况。</description>
    </item>
    
    <item>
      <title>期中总结</title>
      <link>https://xxxxxie1997.github.io/post/22th/</link>
      <pubDate>Tue, 30 Jun 2020 11:17:28 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/22th/</guid>
      <description>什么是闭包？用途是？缺点是？ 一个函数在它的作用域之外被引用，就相当于创建了这个函数的闭包,例：
function func1() { let funcName = &amp;#34;xxx&amp;#34;; function func2() { alert(funcName); } func2(); } func1(); 上述代码中，funcName 是由 func1 函数创建的局部变量，func2 使用了父函数 func1 声明的变量，func2 就是一个闭包。 用途：可以将变量保存在内存中，因为闭包函数执行完后不会被回收。可以实现公有变量以及实现封装 缺点：费内存，滥用会导致网页的性能问题
call,apply,bind 的用法？ call：使用一个指定的 this 值和单独给出的参数（一个或多个）来调用一个函数。 apply：用法和 call 类似，但 apply 接受的是包含多个参数的数组。 bind：使用 bind 方法可以创建一个新的函数，bind 被调用时，这个新创建函数的 this 会被指定为 bind 的第一个参数，然后其余参数会作为新创建函数的参数供调用时使用
列举至少 10 个 http 状态码，描述意义 100：continue 继续：这个临时响应用于通知客户端它的部分请求已经被服务器接收且未被拒绝，客户端应该继续发送请求的剩余部分 200：OK 成功，意义根据请求使用的方法不同而不同 201：created 已创建,通常为 put 方法得到的响应码 202：accepted 已创建，表示服务器接受请求但尚未处理 204：no content 无内容，该响应没有响应内容只有响应头。 205：reset content 重置内容，告诉用户代理去重置发送该请求窗口的文档视图 206：partial content 部分内容，客户端通过使用 range 头字段进行文件分段下载时使用的状态码 300：multiple choice 多种选择，一个请求有多重可能的响应，用户必须选择它们中的一个，服务器没有标准可以遵循以代替用户做出选择 301：moved permanently 永久移动，表示请求的 url 资源路径已经永久改变，新的 url 可以再响应的 location 头字段里找到 302：found 临时移动，表示请求的 url 资源路径临时改标并且还可能继续改变，因此客户端在以后方位还得继续使用这个 url，新的 url 可以再响应的 location 头字段里找到 400：bad request 错误请求，发送请求语法错误，服务器无法正常读取。 401：unauthorized 未授权，需要身份验证后才能获取请求内容。只需正确的账号密码即可通过验证。 403：forbidden 禁止访问，客户端没有权利访问请求内容，服务器拒绝该请求 404：not found 未找到：服务器找不到所请求的资源。 502：bad gateway 网关错误：服务器作为网关且从上游服务器获取到了一个无效的 http 响应。</description>
    </item>
    
    <item>
      <title>一点小成果</title>
      <link>https://xxxxxie1997.github.io/post/21th/</link>
      <pubDate>Mon, 01 Jun 2020 22:07:26 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/21th/</guid>
      <description>码了十个小时，写了无数 bug，感觉很简单的第一个小项目是千呼万唤始出来啊。。。
预览建议使用 gitee 的链接。
因为 github 有时候载入图片很慢，所以我贴了一份到 gitee 上。。。国内的代码托管应该快不少吧。
 预览链接（github）
 预览链接（gitee）
 源码在这里</description>
    </item>
    
    <item>
      <title>DOM事件和事件委托</title>
      <link>https://xxxxxie1997.github.io/post/20th/</link>
      <pubDate>Sun, 31 May 2020 11:02:41 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/20th/</guid>
      <description>概述 DOM 允许 JavaScript 对 HTML 事件做出反应。系统内发生的动作或事情（例如点击按钮，混动滚轮等操作），可以通过某种方式来对发生的动作或事情做出回应。
在标准发布之前，ie5 浏览器认为应该先调用最内部的函数，而 Netscape （网景）反其道而行之，认为应该先调用外部的函数，对开发者造成了很多的不便。
直到 2002 年，W3C 发布标准，规定浏览器应该同时支持从外向内以及从内向外两种方式来寻找监听函数。
从外向内寻找的方式叫做事件捕获，而从内向外寻找的方式叫做事件冒泡。
事件绑定 api 在规则被制定之前，不同的浏览器有不同的 api，例：
IE5 浏览器：
xxx.attachEvent(&amp;#39;onclick&amp;#39;,fn)//事件冒泡 Netscape（网景）浏览器：
xxx.addEventListener(&amp;#39;click&amp;#39;,fn)//事件捕获 在 W3C 制定标准后，事件绑定 api 被统一为：
xxx.addEventListener(&amp;#39;click&amp;#39;,fn,bool) 通过传入一个 bool 参数来决定寻找函数的方式，bool 为 true 时，通过事件捕获（外 → 内）来寻找 fn。
不传 bool 参数或 bool 值为 falsy 时，则使用事件冒泡（内 → 外）来寻找 fn。
这里提一个特例，如果被监听的元素只有一个（即 fn 分别在捕获和冒泡两个阶段监听事件，用户操作的元素就是开发者监听的元素）时，先用哪一种方式监听，就先执行哪一个，与传入的 bool 值无关。
取消冒泡 事件捕获不能被取消，但是事件冒泡可以。
使用e.stopPropagation()可以中断冒泡，告诉浏览器不再继续向上寻找函数，一般用于封装一些独立组件。
但是取消冒泡也有特例。。。有些事件冒泡不能被取消，例如滚动条（scroll）事件。
虽然 scroll 事件不能取消冒泡，但可以通过其他方式组织滚动事件，例如组织 wheel 滚轮事件，再使用 CSS 隐藏滚动条即可。（注意：即便隐藏滚动条，JS 依然可以修改 scrollTop）
自定义事件 除了 100 多种浏览器自带事件（列表在 MDN 上，点我查阅）之外，还可以自定义事件。</description>
    </item>
    
    <item>
      <title>jQuery的设计思路</title>
      <link>https://xxxxxie1997.github.io/post/19th/</link>
      <pubDate>Fri, 29 May 2020 19:54:22 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/19th/</guid>
      <description>通过时间不短的学习，对于 jQuery 的设计思路有了一定的理解，不得不说作为寿命最长的 js 函数库，jQuery 更方便学习者入门，但想要掌握 jQuery 属实不轻松。
学习各种函数库的过程，不仅仅是学习函数的使用方法那么简单，真正能够提升自己的东西，实际是这些函数库的作者在设计它们的时候的思路，于是我尝试按照以下顺序，将这些函数的思路和步骤做一次总结：
  获取元素
  创建元素
  移动元素
  修改元素属性
  链式操作怎样实现
  获取元素 获取元素是 jQuery 的基本设计思想，实际就是选择某一个或多个网页元素，然后对元素进行操作。
何以使用 CSS 选择器的表达式来选择元素：$(&#39;#id&#39;)和$&#39;div.class&#39;)等。
也有 jQuery 所特有的表达式：$(&#39;a:first&#39;) 和$(&#39;tr:odd&#39;)等。（可以查阅阮一峰&amp;ndash;《jQuery 设计思想》）
创建元素 jQuery 中，创建元素的方法较为简单，只需要将新元素传入 jQuery 构造函数即可。
例：
$(&amp;#39;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;#39;); $(&amp;#39;&amp;lt;li class=&amp;#34;new&amp;#34;&amp;gt;new list item&amp;lt;/li&amp;gt;&amp;#39;); $(&amp;#39;ul&amp;#39;).append(&amp;#39;&amp;lt;li&amp;gt;list item&amp;lt;/li&amp;gt;&amp;#39;); 。。。。。。就这么简单。
移动元素 jQuery 中，可以通过两种方法来移动网页中元素的位置，一种为直接移动该元素至目标位置，另一种为移动其他元素使该元素达到目标位置。
例如：
$(&amp;#39;div&amp;#39;).insertAfter($(&amp;#39;p&amp;#39;)); //将div元素移动到p元素后面 $(&amp;#39;p&amp;#39;).after($(&amp;#39;div&amp;#39;)); //将p元素移动到div元素前面 从效果上来说两种方法是相同的，不同点在于操作结束后返回的元素不同，前者返回 div，后者返回 p，根据需求选择方法即可。
修改元素属性 使用 jQuery 修改元素属性，实际就是使用 js 中 setAttribute()和 getAttribute()的简化，使用方式有四种：</description>
    </item>
    
    <item>
      <title>JS 算法入门：排序算法</title>
      <link>https://xxxxxie1997.github.io/post/18th/</link>
      <pubDate>Fri, 22 May 2020 19:51:40 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/18th/</guid>
      <description>好长时间没更新博客了。。自从学了 js 之后，效率一天不如一天，之前学 css 的时候废寝忘食，现在连保持注意力集中都变得困难起来了，主要原因是我本来对 css 兴趣更多一些，作为小白，我对花里胡哨的样式很感兴趣，但到了 js，突然出现的大量的理论知识、算法和抽象概念让我感到无所适从。。。有点难受。
对我来说学习 js 确实有些困难，但目前来说 js 毕竟还是前端的基础，是找工作的刚需，于是我决定将上课听到的内容尽可能详细的记录在博客中，即便忘记也有迹可循，给自己加个油，我对前端很感兴趣，我也希望能够学以致用，成功的转行。
排序算法 通过学习了解到，各式各样的复杂算法本质都是通过大量的简单逻辑组合而成，所以越是基础的东西越要记得牢靠才行。。。
列举了几种算法：
 选择排序 原理：声明一个用于获取数组中最小值索引的函数 minIndex 和用于交换数组中两个数字位置的函数 swap 来达到第 i 次获取最小值索引后与第 i 项换位的效果从而实现排序。  let swap = (array, i , j) =&amp;gt;{ let k = array[i] array[i] = array[j] array[j] = k } let minIndex = numbers =&amp;gt;{ let index = 0 for(let i = 1;i &amp;lt; numbers.length; i++){ if(numbers[i] &amp;lt; numbers[index]){ index = i } } return index } let sort = numbers =&amp;gt;{ for(let i = 0 ; i &amp;lt; numbers.</description>
    </item>
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>https://xxxxxie1997.github.io/post/17th/</link>
      <pubDate>Sun, 10 May 2020 10:36:05 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/17th/</guid>
      <description>在开发过程中，JS 函数的不同执行时机，会直接影响到函数的输出结果。
先举几个简单的例子吧：
例 1 let a = 1 function fn(){ console.log(a) } 这段代码中，无法打印出 1 ，因为根本就没有调用函数的代码。
例 2 let a = 1 function fn(){ console.log(a) } fn() 通过 fn()调用了函数，所以执行console.log(a)，打印出 a 的值：1。
例 3 let a = 1 function fn(){ console.log(a) } a = 2 fn() 这段代码中在调用函数前赋予了 a 一个新的值：2，所以执行后会打印出 2。
例 4 let a = 1 function fn(){ console.log(a) } fn() a = 2 这段代码在调用函数之后才赋予了 a 一个新的值：2，所以执行后还是打印出调用函数时 a 的值：1。
（一定要注意不能陷入固定的思路中，并非let a = 1后 a 的值就一定是 1 ，它只是声明了一个 a 而已，a 的具体取值要看 a 被赋予了什么值以及函数的执行时机才行）</description>
    </item>
    
    <item>
      <title>JS对象</title>
      <link>https://xxxxxie1997.github.io/post/16th/</link>
      <pubDate>Sun, 03 May 2020 17:08:33 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/16th/</guid>
      <description>JS 对象（object）的特点：
  无序的数据集合。
  键值对的集合。
  声明对象的两种语法  let obj={&#39;name1&#39;:&#39;xxx&#39;,&#39;name2&#39;:&#39;xxx&#39;}   let obj=new Object({&#39;name&#39;:&#39;xxx&#39;})  如何删除对象的属性   使用delete obj.xxx或delete obj[&#39;xxx&#39;]可以删除 obj 中 xxx 属性。
  使用obj.xxx = undefined可以删除 obj 中 xxx 的属性值，相当于赋予 xxx 属性一个空值。
  需要注意两种用法的区别：前者为完全删除属性，后者为保留属性但属性值为空。
如何查看对象的属性 查看自身属性：Object.key(obj)
查看自身属性+共有属性：console.dir(obj)
如何修改或增加对象的属性  直接赋值：    let obj={name:&#39;xxx&#39;}
  obj.name=&#39;xxx&#39;
  obj[&#39;name&#39;]=&#39;xxx&#39;
  obj[&#39;na&#39;+&#39;m&#39;+&#39;e&#39;]=&#39;xxx&#39;
  let key = &#39;name&#39;;obj[key]=&#39;xxx&#39;</description>
    </item>
    
    <item>
      <title>JS语法</title>
      <link>https://xxxxxie1997.github.io/post/15th/</link>
      <pubDate>Wed, 29 Apr 2020 22:40:38 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/15th/</guid>
      <description>简述 JS 语法 表达式和语句 表达式常常作为一个调用函数的参数被用于任何需要一个值的地方，而语句主要用于改变环境，语句本身属于一个行为。
大多数情况下空格和回车无实际意义，但唯独 return 之后不能使用回车（问就是设计缺陷 233）
标识符规则   第一个字符可以是 Unicode 字母、“$”、以及中文。
  之后的字符除上述三种，还可以使用数字。
  if else 语句 语法为：if (表达式) {语句1} eles {语句2},其中，if 和 eles 之后都只有一句语句时可以省略“{}”（不建议）。
同时还有 eles if 和 if return 写法。
while for 语句 while 循环 语法： while (表达式) {语句}，循环执行的步骤为：
=&amp;gt;判断表达式真假（T/F）
=&amp;gt;表达式为 T 时，执行语句，执行完后再次判断表达式 T/F。
=&amp;gt;当表达式为 F 时，退出循环，执行后面的语句。
for 循环 语法：for(语句1;表达式;语句2){循环体}，循环执行的步骤为：
=&amp;gt;执行语句 1
=&amp;gt;判断表达式 T/F
=&amp;gt;如果表达式为 T，执行循环体后执行语句 3
=&amp;gt;如果表达式为 F，直接退出循环，执行后面的语句
break continue 的区别 break 表示退出当前所有的循环，而 continue 表示退出当前的一次循环。</description>
    </item>
    
    <item>
      <title>JavaScript的诞生</title>
      <link>https://xxxxxie1997.github.io/post/14th/</link>
      <pubDate>Fri, 24 Apr 2020 21:08:45 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/14th/</guid>
      <description>“1994 年，网景公司（Netscape）发布了 Navigator 浏览器 0.9 版。这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。&amp;hellip;&amp;hellip;网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。与此同时，Sun 公司将 Oak 语言改名为 Java，正式向市场推出。Sun 公司大肆宣传，许诺这种语言可以&amp;quot;一次编写，到处运行&amp;rdquo;（Write Once, Run Anywhere），它看上去很有可能主宰世界。1995 年 5 月，网景公司做出决策，未来的网页脚本语言必须&amp;quot;看上去与 Java 足够相似&amp;rdquo;，但是比 Java 简单，使得非专业的网页作者也能很快上手。这时，Brendan Eich 被指定为这种&amp;quot;简化版 Java 语言&amp;quot;的设计师。&amp;rdquo;
&amp;ndash;阮一峰《Javascript 诞生记》
值得一提的是 Brendan Eich 对 Java 本身并不感兴趣，为了应付公司，他只用了十天就开发出了 JavaScript。。。
JavaScript 是一种属于网络的脚本语言,已经被广泛用于 Web 应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常 JavaScript 脚本是通过嵌入在 HTML 中来实现自身的功能的。
  是一种解释性脚本语言（代码不进行预编译）。
  主要用来向 HTML（标准通用标记语言下的一个应用）页面添加交互行为。
  可以直接嵌入 HTML 页面，但写成单独的 js 文件有利于结构和行为的分离。
  跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如 Windows、Linux、Mac、Android、iOS 等）。
  Javascript 脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架。Javascript 提供了四种基本的数据类型和两种特殊数据类型用来处理数据和文字。而变量提供存放信息的地方，表达式则可以完成较复杂的信息处理。
  可以实现 web 页面的人机交互。</description>
    </item>
    
    <item>
      <title>浅析 URL</title>
      <link>https://xxxxxie1997.github.io/post/13th/</link>
      <pubDate>Tue, 21 Apr 2020 17:54:54 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/13th/</guid>
      <description>URL（Uniform Resource Locator,统一资源定位符）用于描述一个网络上的资源。
基本格式以百度为例：
https://（协议）www.baidu.com（域名）/s?（路径）wd=hello&amp;amp;rsv_spt=1（查询参数）#5（锚点）
  协议：用户使用的底层协议。在 Internet 中可以使用多种协议，如 HTTP，FTP 等。
  域名：顾名思义就是网站的域名，出了使用域名外，也可以使用 IP+端口号。
  路径：域名后的最后一个“/”之后到“？”之前路径部分。
  查询参数：“？”之后到“#”之前的部分为参数。参数可以允许有多个，使用“&amp;amp;”作为分隔符。
  锚点：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。用于显示一个页面中的不同部分。
  DNS(Domain Name System,域名系统) ，用于进行域名解析。
在用户输入域名后，浏览器会向 DNS 服务器询问用户输入的域名对应哪一个 IP，收到询问后服务器会回答一个 IP，这时浏览器才会对相应 IP 的 80/443 端口发送请求，请求为查看该域名的网页。
其中，80 为 http 默认端口，443 为 https 默认端口。
IP （Internet Protocol，网际互连协议）
IP 地址是 IP 协议提供的一种统一的地址格式,简单来说，IP 地址是一台接入了网络的设备在网络中的唯一标识。
PING 命令
用于对指定域名（或 ip+端口）发送、接收数据包以确定本机是否能和网络中的另一个主机建立链接。
域名及其分类
域名实际上就是一串在因特网计算机上的名字字符，这串字符是唯一的，传输数据时用做定位标识。
域名有很多种类，常见的域名有：com（商业性的机构或公司）、org（非盈利的组织或团体）等。</description>
    </item>
    
    <item>
      <title>浏览器渲染及css动画相关总结</title>
      <link>https://xxxxxie1997.github.io/post/12th/</link>
      <pubDate>Mon, 20 Apr 2020 17:33:30 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/12th/</guid>
      <description>浏览器渲染的步骤：  根据 html 内容构建 HTML 树（DOM）。 根据 css 内容构建 css 树（CSSOM）。 将两棵树合并，得到一棵“渲染树”（render tree）。 对页面进行布局（layout）：文档流、盒模型等计算大小和位置。 绘制（paint）：把页面中元素的边框颜色，文字颜色，阴影等绘制出来。 合成（composite）：根据层叠样式表中层叠关系展示最终页面。  有三种更新方式：
 JS/CSS&amp;gt;样式&amp;gt;布局&amp;gt;绘制&amp;gt;合成 JS/CSS&amp;gt;样式&amp;gt;绘制&amp;gt;合成 JS/CSS&amp;gt;样式&amp;gt;合成  在 CSS 动画中，每一种属性都会触发不同的更新方式，具体哪一种属性触发哪种更新方式，可以查阅csstriggers。
css 动画的两种做法：  使用 transform，一般要配合一定触发条件如 hover，有四种常用取值：   位移translate:可以设定 xy 轴的方向，也可以设置正负值。语法：translateX/Y(100px); 缩放scale：语法为scale(x.x);x.x 为缩放倍数。 旋转rotate：语法为rotate(Xdeg) X 为旋转角度，方向为顺时针。取负值为逆时针旋转。 倾斜skew：就是倾斜。。难以言喻，试试就知道了，取值范围同 translate。  使用 animation：  首先，在需要做动画的元素的样式中添加animation，可以设置动画的各种属性，animation 的语法为:animation:动画名称 时长 过渡方式 延迟 次数 方向 填充模式 是否暂停;
 动画名称：顾名思义随便起了叫什么都行。。 时长：单位为 s 或 ms。 过渡方式：取值和 translation 一样，如translation或linear。 延迟：同样为 s 或 ms。 方向：如果默认方向为 A&amp;gt;B，那么：reverse反向进行 B&amp;gt;A、alternate反复进行，由 A 开始 A&amp;gt;B&amp;gt;A&amp;gt;B&amp;gt;A、alternate-reverse反向的反复进行，由 B 开始 B&amp;gt;A&amp;gt;B&amp;gt;A&amp;gt;B。 填充模式：取值有none``forwards``backwards``both等，具体使用方式还需参阅文献。 是否暂停：暂时用不到。。学习 js 后再总结。  其次，添加新的样式@Keyframes 动画名称声明动画中的关键帧，浏览器会自动补充缺失帧。 @keyframes 主要有两种使用方式：</description>
    </item>
    
    <item>
      <title>CSS布局3：grid布局</title>
      <link>https://xxxxxie1997.github.io/post/11th/</link>
      <pubDate>Sat, 18 Apr 2020 19:21:38 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/11th/</guid>
      <description>首先要说明：grid 布局的兼容性一般，所以这个布局虽然极其方便且灵活，但仍然不是目前主流布局，所以还是将就 flex 一把梭。
grid 布局的特性：   grid 布局和 flex 一样主要分为容器 container 和内容 items，只需要在元素的样式中添加display:grid;即可使用。
  该布局不同于以往布局，该布局方式为将页面划分为多个区域，类似一个表格，所以编辑起来非常灵活。但是比较抽象，以我浅显的理解还无法做出条理清晰的总结。
  grid 布局的相关属性：
  grid-template-columns:和grid-template-rows:可以将页面分割为一个几行几列的表格，值的单位可以使用 px/vw/%/fr 等。（fr：将剩余空间平均分为“总 fr 数”份，每个以 fr 做单位的元素分得 n 份）。
  grid-column(row)-start(end):N;N 为一个数字，可以指定赋予该属性的元素在分割出的表格里起（止）分别为表格中的第几条线。正因为这个属性，该布局方式才如此灵活。
    grid-gap:可以设置 grid 元素间空隙的大小。
  grid-template-areas: 更加奇妙且灵活的分割方式，只需要取值输入多个字符串，便能将页面分割。 例：
  .grid { grid-template-areas: &amp;#34;1 2 3 4 5&amp;#34; &amp;#34;1 2 3 4 5&amp;#34; &amp;#34;1 2 3 4 5&amp;#34;; } 便能将页面分割为三行五列的表格，选择区域&amp;quot;1&amp;quot;时，即选择字符串中所有带 1 的部分，即第一列,可以通过修改字符串内容，达到选择不规则形状区域的功能。</description>
    </item>
    
    <item>
      <title>CSS常用布局2：flex布局</title>
      <link>https://xxxxxie1997.github.io/post/10th/</link>
      <pubDate>Thu, 16 Apr 2020 21:02:00 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/10th/</guid>
      <description>flex 布局 flex 布局的学习内容主要分为两个部分：
容器 container： container 内为弹性流（flex-flow），与文档流（normal-flex）不同，容器内的内容为弹性盒，弹性盒在内容放不下时默认不会换行，而是将自身进行挤压。
container 样式：
  display:flex;：使容器占满空间后另起一行（值为 inline-flex 时不换行。）
  flex-direction设定主轴方向：row为横向，column为纵向（若加-reverse后缀，则改为反向。）
  flex-wrap:(no)wrap：内容放不下时（不）换行。
  justify-content为主轴对齐方式，有如下几个值：
   flex-start：将内容向主轴起点方向对齐。 flex-end：将内容向主轴终点方向对齐。 space-between：将剩余空间放在内容间的缝隙里。 space-around：将剩余空间放在内容的周边。 space-evenly：将剩余内容平均分配（很少用）。 center：将内容居中对齐。    align-items：次轴对齐，用法同justify-content类似，不同之处为该元素默认值为stretch：将所有内容拉伸至最长内容相同的高度。
  align-content多行内容对齐方式，可赋予值与align-items相同，但决定的事不同高度的元素在主轴的对齐方式。
  flex-flow：此属性为flex-direction和flex-wrap的组合。语法：flex-flow:row-reverse wrap;
  内容 items items 样式：
  order：给内容排序，赋予 order 元素会按 order 值从小到大排列，值一般为整数，-1 为最小（也就是排第一）。
  flex-grow：将多余的空间按一定比例分给内容，默认值为 0（即不分配空间），值越大，分得的空间就越多。
  flex-shrink：当没有足够的空间时，值越大的元素挤压的越明显（默认值为 1，即空间不足时等比缩小，值为 0 时不缩小）。
  flex-basis：控制元素基准宽度（默认值为 auto，实际直接给元素 width 也是一样的）。</description>
    </item>
    
    <item>
      <title>CSS常见布局1：float布局</title>
      <link>https://xxxxxie1997.github.io/post/9th/</link>
      <pubDate>Wed, 15 Apr 2020 20:30:48 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/9th/</guid>
      <description>float 布局： 步骤：
 在子元素上添加属性float:left;和width 给添加 float 属性元素的父元素赋予clearfix类，然后再样式表中编辑如下内容：  .clearfix::after { content: &amp;#34;&amp;#34;; display: block; clear: both; } 这个 CSS 样式可以让父元素包裹住那些因为赋予float样式而脱离文档流的元素。 很关键，一定要写！ 很关键，一定要写！ 很关键，一定要写！
 如果图片下面多出来一部分内容如背景色，使用vertical-align:middle;即可消去多于内容（没有为什么，目前死记硬背即可。） 当 border 因为占页面空间而扰乱了布局时，可以将 border 改为outline，这样 border 就不会占据盒模型空间了。 如果要做平均分布，在内容中加入一个任意名字的新图层（标签如 div），赋予一个-margin属性，可以将空间推宽。（尚未研究明白，后续会继续学习）  前辈的经验：
 一行的最后一个元素不设width值或者留一些空间以备不时之需。 float 布局不需要考虑响应式，因为这个布局专为 IE 浏览器准备而手机一般没有 IE 浏览器，只有傻子采用 float 布局做手机页面。 IE6/7 存在双倍 margin 的 bug，解决方法：   针对 IE6/7 把元素的 margin 改为一半。 将元素改为 inline-box 元素（加一个display:inline-box;）  只需要给页面加上头尾（header和footer），即可满足 pc 页面需求。 float 布局需要程序猿自己计算各元素宽度，使用起来不灵活。 CSS 没有为什么。  </description>
    </item>
    
    <item>
      <title>CSS布局</title>
      <link>https://xxxxxie1997.github.io/post/8th/</link>
      <pubDate>Wed, 15 Apr 2020 20:11:12 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/8th/</guid>
      <description>css 布局主要分为两种类型：
 固定宽度布局：一般宽度为 960、1000、1024px，一般用于 pc 页面。 不固定宽度布局：根据文档流原理自动布局，一般应用于手机页面。 （响应式布局：在 pc 上为固定宽度，在手机上则不固定。） 注意：文档流本来就是自适应，不需要加额外的样式。  布局的思路：
 对于老手来说，一般按从大到小设计，先确定大局，后完善每个小部分的布局。 对于新手来说，一般按从小到大设计，先完成小布局，然后将多个小布局组合成为大布局。  关于使用哪种布局，具体情况要看需求，根据所学整理出一张思维导图： 布局是前端学习过程中一个非常重要的部分，学习的时候一定要细心。</description>
    </item>
    
    <item>
      <title>CSS文档流与盒模型</title>
      <link>https://xxxxxie1997.github.io/post/7th/</link>
      <pubDate>Tue, 14 Apr 2020 17:01:40 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/7th/</guid>
      <description>文档流（normal-flow）：通俗的理解为页面中文档流动的方向。 以前区分行内元素和块元素（浏览器赋予默认属性），现在都可以通过修改样式表内display属性达到想要的效果，基本已经不需要区分了。
 文档的流动方向：   inline 元素：从左到右，到达最右边后换行。 block 元素：从上到下，每一个都另起一行。 inline-block 元素：从左到右，但当内容不够容下标签所有内容是会换行。  文档在页面中的宽度：   inline元素：宽度为内部所有 inline 元素的和，该元素不能使用width属性指定宽度。 block元素：默认自动计算宽度，可以用width指定，不写默认width为 auto （注意：并非 100%而是 auto，若不是特殊情况，尽量不要写 100%）。 inline-block元素：结合前两者特点，默认自动根据内容计算宽度，也可以指定 width。  文档在页面中的高度：   inline元素的实际高度为行高。不接受width和height属性，但依然可以赋予其他属性（如内外边距）。 block元素的实际高度由内部文档流元素决定，块元素会将内部的所有文档流元素包起来，可以使用height指定高度。 inline-block元素和 block 元素基本相同，也可以通过height属性指定高度。  存在一些特殊情况，如 block 元素的内容高度超过了 height 属性赋予的高度（文档溢出&amp;ndash;overflow）。   默认值为overflow=visiable;，使得超出的内容可见（内容会从block元素边框溢出）。 overflow: scroll;,该值可以给块元素添加滚动条方便用户通过滚动条浏览块元素内的内容，但很难受的是不管有没有溢出都会有滚动条，很丑…… 所以一般使用 overflow: auto;会自动根据内容长短添加滚动条，这个是目前最常用的一种处理方式。 也可以使用overflow-x或y 可以分别设置横向，纵向的溢出内容，但不是很常用因为比较麻烦。  CSS 盒模型： CSS 盒模型分为两种：
 内容盒 content box 边框盒 border box 可通过box-sizing属性设置盒模型类型。 盒模型由content、padding、border、margin四个部分组成。 区别： content box 的宽高为盒内部元素内容宽高总和，即宽高只包含content。 border box 的宽高为边框的宽高，即宽高为border、padding和content的总和。所以在没设置边框和内边距时，两模型效果基本相同。  关于盒模型的学问还有很多，在以后学习过程中有机会再总结吧。</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://xxxxxie1997.github.io/post/6th/</link>
      <pubDate>Mon, 13 Apr 2020 10:29:25 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/6th/</guid>
      <description>a 标签：
a 标签为超链接，它的作用是可以跳转到外部页面或跳转至页面内部的锚点。 a 标签可加入的属性：
   href指定连接方向，（值可为外部连接，也可为内部 id 以及邮箱、电话等）。 target通过赋予值可以决定跳转在哪里打开，默认值为_self即当前页面（_blank为空白页打开，_top在顶层页面打开，_parent在父级页面打开）。也可通过给 iframe 命名达到在 iframe 中打开的效果。 download赋予该属性的连接会被下载。   img 标签：
img 标签用于发出一个 get 请求，向用户展示一张图片。 可加入的属性：
   src图片路径（这个属性必须有，否则会报错）。 alt在图片加载失败后，会显示 alt 中的内容。 height 和 width决定图片的高和宽，值可以为固定像素，也可以为百分比（宽和高如果只写一个值，另一个值会根据图片原始比例自动适应，两个都写可能导致图片变形）。 （响应式：img {max-width:100%}意为最大宽度为屏幕的 100%，大小会自动适应，可用于移动端页面开发。）  table 标签：
table 为表格标签，一般由thead tbody tfoot组成。（都不写的话内容会自动写入 tbody） 大致格式为：
&amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;横表头1&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;横表头2&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;横表头3&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;竖表头1&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt;值1.1&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值1.2&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值1.3&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;竖表头2&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt;值2.1&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值2.2&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值2.</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://xxxxxie1997.github.io/post/5th/</link>
      <pubDate>Sun, 12 Apr 2020 14:08:00 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/5th/</guid>
      <description>  HTML 是李爵士（Tim Berners-Lee，也是 Web 的发明者）和他的同事在 1990 年创立的超文本标记语言。
  html 的起手式：
  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh-CN&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;网页的标题&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; 网页的主要内容 &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 常用的章节标签：   h1~h6分别表示 1 至 6 级标题 section表示新章节 p为段落 header为网页头部 footer为网页底部 main为网页的主要内容 aside为网页的旁支内容 div将网页内容划分为几个部分  全局属性（指所有标签都能添加的属性）   class &amp;ndash;给标签赋予一个类 contenteditable &amp;ndash;添加该属性的标签可以在页面中被编辑 hidden &amp;ndash;添加该属性的标签内容会被隐藏 id &amp;ndash;给标签赋予一个 id style &amp;ndash;给标签设置样式 tabindex &amp;ndash;添加该属性的标签内容在页面中可以被 tab 选中，属性值为数字，数字越小越先被选中（0 为最后被选中） tittle &amp;ndash;属性会将完整内容显示在页面上  常用的内容标签：   ol+li &amp;ndash;有序列表，li 包裹在 ol 中，是有序列表的内容 ul+li &amp;ndash;无序列表，用法同有序 dl+dt+dd &amp;ndash;描述列表，dt 为被描述内容，dd 为该内容的描述 pre &amp;ndash; 被 pre 包裹的内容，所有的空格都将保留 code &amp;ndash;被 code 包裹的内容会使用等宽字体 hr &amp;ndash;水平分割线 br &amp;ndash;换行 a &amp;ndash;超链接 em &amp;ndash;强调语气 strong &amp;ndash;强调内容本身 quote &amp;ndash;内联引用 blockquote &amp;ndash;块引用  </description>
    </item>
    
    <item>
      <title>如何用 hugo 搭建个人博客</title>
      <link>https://xxxxxie1997.github.io/post/4th/</link>
      <pubDate>Sat, 11 Apr 2020 11:02:10 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/4th/</guid>
      <description>首先当然是安装hugo了^_^。安装完后运行hugo version可以检查是否成功安装
  通过运行hugo new site xxxx.github.io-creator在当前目录下建立新的hugo目录，名为xxxx.github.io-creator （xxxx为github用户名，全小写。）
  进入xxxx.github.io-creator目录，在目录中建立git库(git init)
  运行git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke，从github下载名为ananke的主题
  运行echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml，将主题信息添加到配置文件中
  运行hugo new post/blog01.md，在当前目录下的post目录中新建 blog01.md
  进入post目录中，运行code blog01.md，打开blog01进行编辑
  修改title为任意内容，draft属性改为false（draft属性决定文件是否保存为草稿）
  哒哒哒的码入内容……
  码完保存后，运行hugo -D建立页面，该页面会以文件夹的形式出现在xxxx.github.io-creator/public/post中
  运行hugo server，启动hugo服务器（也可以省略步骤10，运行`hugo server -D即可），便可从本地查看页面效果。若要配置新主题，需自行琢磨。。
  回到xxxx.github.io-creator目录，运行touch .gitignore并打开，将public文件夹输入，从git本地库中忽视该文件夹
  访问github，建立新的远程库，名为xxxx.github.io （xxxx同样为用户名小写，不能出错）
  进入public目录
  复制远程库SSH地址，运行git remote add oringin SSH地址将本地库public与远程库xxxx.</description>
    </item>
    
    <item>
      <title>git远程仓库</title>
      <link>https://xxxxxie1997.github.io/post/3rd/</link>
      <pubDate>Sat, 11 Apr 2020 10:21:45 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/3rd/</guid>
      <description>git远程仓库的操作 听着是不难轮到自己操作着实迷惑了很久，同时也令我警觉起来，常言道万丈高楼平地起，打基础的时候可千万不能糊弄呀 （= n=）
将本地仓库的文件同步到远程仓库 首先到github建立新的远程仓库，得到SSH链接 切换到想要上传的目录下，在确定本地文件已提交后，运行git remote add 远程仓库名 SSH地址将本地仓库与远程仓库联系起来 运行git push -u 远程仓库名 SSH地址将本地库的当前分支上传至对应远程仓库 （如果要上传其他分支，通过git branch建立，git checkout切换至其它分支，再push）
这个操作只有第一次需要，后续上传只需运行git push即可
将远程仓库的文件同步到本地仓库 通过git clone 远程仓库名可以将远程仓库中的内容同步到本地仓库（所有分支）
容易忽视的问题：对文件的所有操作都需要标记后提交才会生效（包括文件的删除和重命名等）如果没有对所有的操作进行提交，便无法push，需要注意</description>
    </item>
    
    <item>
      <title>git本地仓库</title>
      <link>https://xxxxxie1997.github.io/post/2nd/</link>
      <pubDate>Fri, 10 Apr 2020 16:36:26 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/2nd/</guid>
      <description>首先还是从简单的指令开始学习的，这些指令理解起来同样没什么困难，真正的困难时容易在需要使用时想不起来应该使用哪一个，所以每过一段时间一定要多复习几次，得过且过就糟糕了
git init &amp;ndash;git命令的基础，初始化git，意为在初始目录下创建.git目录
（一定注意确保当前目录是所需目录，否则小朋友会有很多问号）
git add 路径 &amp;ndash;描述哪些路径是我所需要提交的
（可通过建立.gitignore文件来忽视对一些文件的描述，在该文件中输入需要忽视的文件名即可，这些文件不会被提交）
git commit -m 字符串 &amp;ndash;提交当前被描述过的文件并说明提交理由（字符串中有空格需引号括起来）
git commit -v &amp;ndash;使用-v会在提交之前回顾文件的改动。（推荐）
注意：一定要先描述哪些路径是需要提交的之后再提交，也就是需要先add后commit才行
（可通过git status查看文件当前状态，当前未描述会标红，反之标绿）
git reset --hard aaaaaa（aaaaaa为版本号，版本号没有固定长度，只需唯一即可） &amp;ndash;使用该命令可以在提交过的各个版本中左右横跳。
可以使用git log来查看提交后的版本，用git reflog查看版本的所有变动（包括改动后的版本）
注意：在reset --hard aaaaaa之前，一定要通过status查看当前文件描述状态，这些文件要么没有描述过，要么已经上传完成，如果是描述过但没有上传（也就是status标绿的状态）那么在reset后，这些文件将会消失
git branch X &amp;ndash;基于当前内容创建平行分支X（X为分支名），使用branch命令可以做到针对不同需求同时开发
git branch -d X &amp;ndash;删除X分支及其内容
git checkout X &amp;ndash;切换至之前创建的X分支最后一次提交的状态
若要切换回主线，只需git checkout master即可
git branch后不加参数可以查看当前所在分支以及分支数
git merge &amp;ndash;合并分支：
1.通过checkout切换至想要保留的分支（一般为master）
2.运行git merge 想要合并的分支名
注意：如果多条分支对同一文件的同一行进行了不同的修改，会导致冲突。命令行中的conflict提示一定要看，很关键
冲突的解决方法：
1.使用git status -sb查看到底是哪一个或哪些文件冲突
2.打开冲突的文件，在文件中搜索====，可以找到冲突位置
3.在====的上下两部分中选择需要保留的代码（当然全部保留也可以）
4.修改完后删除如&amp;laquo;&amp;laquo;、====、等用于提示冲突的多于代码
5.使用git add标记修改后的文件
6.再次使用git status -sb查看下一个冲突文件的文件名</description>
    </item>
    
    <item>
      <title>命令行入门</title>
      <link>https://xxxxxie1997.github.io/post/1st/</link>
      <pubDate>Fri, 10 Apr 2020 08:36:26 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/1st/</guid>
      <description>作为第一课相对来讲还是比较简单，不理解的东西较少。
第一天主要学习命令行各种命令缩写，含义，以及其在bash中如何使用
基础命令：
pwd &amp;ndash;当前目录绝对路径
ls &amp;ndash;当前路径内容
ls 路径名 &amp;ndash;查看指定路径所有文件
ls -a 路径名 &amp;ndash;指定路径全部内容（包括隐藏文件）
cat 路径 &amp;ndash;查看指定路径全部内容
head 路径 -n X（X为数字） &amp;ndash;查看指定路径前X行内容
tail 路径 -n X（X为数字） &amp;ndash;查看指定路径后X行内容
less 路径 &amp;ndash;以可滚动页面查看指定路径内容
clear &amp;ndash;清屏
touch 文件名 &amp;ndash;若当前目录没有该文件名文件，创建该文件，若有同名文件，更新其修改时间。
echo XXX（任意内容） &amp;gt;文件名 &amp;ndash;若目录中没有同名文件，创建该文件，并在文件内输入XXX，若有同名文件，会以XXX覆盖同名文件内容，需要注意
echo XXX &amp;gt;&amp;gt; 文件名 &amp;ndash;在该文件中添加XXX内容
echo -e &amp;quot;11111/n22222&amp;quot; &amp;gt;&amp;gt; 文件名 &amp;ndash; 在文件中添加两行内容，内容为：
“11111
22222”
其中，/n代表回车（换行）
mkdir 文件夹名 &amp;ndash;在当前路径下建立新文件夹
mkdir -p a/b/c a/d/c &amp;ndash;在当前目录下建立深层目录
以上面指令为例：此指令含义为在当前目录下简历a目录，在b、d目录下各建立一个c目录
cp &amp;ndash;copy即复制
例：
cp a.txt b.txt &amp;ndash;将a.txt中的内容复制到b.txt中</description>
    </item>
    
  </channel>
</rss>