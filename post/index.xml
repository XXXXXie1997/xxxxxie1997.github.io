<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 老咸鱼的水洼</title>
    <link>https://xxxxxie1997.github.io/post/</link>
    <description>Recent content in Posts on 老咸鱼的水洼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Mon, 13 Apr 2020 10:29:25 +0800</lastBuildDate>
    
	<atom:link href="https://xxxxxie1997.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTML常用标签</title>
      <link>https://xxxxxie1997.github.io/post/6th/</link>
      <pubDate>Mon, 13 Apr 2020 10:29:25 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/6th/</guid>
      <description>a 标签：
a 标签为超链接，它的作用是可以跳转到外部页面或跳转至页面内部的锚点。 a 标签可加入的属性：
   href指定连接方向，（值可为外部连接，也可为内部 id 以及邮箱、电话等）。 target通过赋予值可以决定跳转在哪里打开，默认值为_self即当前页面（_blank为空白页打开，_top在顶层页面打开，_parent在父级页面打开）。也可通过给 iframe 命名达到在 iframe 中打开的效果。 download赋予该属性的连接会被下载。   img 标签：
img 标签用于发出一个 get 请求，向用户展示一张图片。 可加入的属性：
   src图片路径（这个属性必须有，否则会报错）。 alt在图片加载失败后，会显示 alt 中的内容。 height 和 width决定图片的高和宽，值可以为固定像素，也可以为百分比（宽和高如果只写一个值，另一个值会根据图片原始比例自动适应，两个都写可能导致图片变形）。 （响应式：img {max-width:100%}意为最大宽度为屏幕的 100%，大小会自动适应，可用于移动端页面开发。）  table 标签：
table 为表格标签，一般由thead tbody tfoot组成。（都不写的话内容会自动写入 tbody） 大致格式为：
&amp;lt;thead&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;横表头1&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;横表头2&amp;lt;/th&amp;gt; &amp;lt;th&amp;gt;横表头3&amp;lt;/th&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/thead&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;竖表头1&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt;值1.1&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值1.2&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值1.3&amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;th&amp;gt;竖表头2&amp;lt;/th&amp;gt; &amp;lt;td&amp;gt;值2.1&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值2.2&amp;lt;/td&amp;gt; &amp;lt;td&amp;gt;值2.</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://xxxxxie1997.github.io/post/5th/</link>
      <pubDate>Sun, 12 Apr 2020 14:08:00 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/5th/</guid>
      <description>  HTML 是李爵士（Tim Berners-Lee，也是 Web 的发明者）和他的同事在 1990 年创立的超文本标记语言。
  html 的起手式：
  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh-CN&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;网页的标题&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; 网页的主要内容 &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 常用的章节标签：   h1~h6分别表示 1 至 6 级标题 section表示新章节 p为段落 header为网页头部 footer为网页底部 main为网页的主要内容 aside为网页的旁支内容 div将网页内容划分为几个部分  全局属性（指所有标签都能添加的属性）   class &amp;ndash;给标签赋予一个类 contenteditable &amp;ndash;添加该属性的标签可以在页面中被编辑 hidden &amp;ndash;添加该属性的标签内容会被隐藏 id &amp;ndash;给标签赋予一个 id style &amp;ndash;给标签设置样式 tabindex &amp;ndash;添加该属性的标签内容在页面中可以被 tab 选中，属性值为数字，数字越小越先被选中（0 为最后被选中） tittle &amp;ndash;属性会将完整内容显示在页面上  常用的内容标签：   ol+li &amp;ndash;有序列表，li 包裹在 ol 中，是有序列表的内容 ul+li &amp;ndash;无序列表，用法同有序 dl+dt+dd &amp;ndash;描述列表，dt 为被描述内容，dd 为该内容的描述 pre &amp;ndash; 被 pre 包裹的内容，所有的空格都将保留 code &amp;ndash;被 code 包裹的内容会使用等宽字体 hr &amp;ndash;水平分割线 br &amp;ndash;换行 a &amp;ndash;超链接 em &amp;ndash;强调语气 strong &amp;ndash;强调内容本身 quote &amp;ndash;内联引用 blockquote &amp;ndash;块引用  </description>
    </item>
    
    <item>
      <title>如何用 hugo 搭建个人博客</title>
      <link>https://xxxxxie1997.github.io/post/4th/</link>
      <pubDate>Sat, 11 Apr 2020 11:02:10 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/4th/</guid>
      <description>首先当然是安装hugo了^_^。安装完后运行hugo version可以检查是否成功安装
  通过运行hugo new site xxxx.github.io-creator在当前目录下建立新的hugo目录，名为xxxx.github.io-creator （xxxx为github用户名，全小写。）
  进入xxxx.github.io-creator目录，在目录中建立git库(git init)
  运行git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke，从github下载名为ananke的主题
  运行echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml，将主题信息添加到配置文件中
  运行hugo new post/blog01.md，在当前目录下的post目录中新建 blog01.md
  进入post目录中，运行code blog01.md，打开blog01进行编辑
  修改title为任意内容，draft属性改为false（draft属性决定文件是否保存为草稿）
  哒哒哒的码入内容……
  码完保存后，运行hugo -D建立页面，该页面会以文件夹的形式出现在xxxx.github.io-creator/public/post中
  运行hugo server，启动hugo服务器（也可以省略步骤10，运行`hugo server -D即可），便可从本地查看页面效果。若要配置新主题，需自行琢磨。。
  回到xxxx.github.io-creator目录，运行touch .gitignore并打开，将public文件夹输入，从git本地库中忽视该文件夹
  访问github，建立新的远程库，名为xxxx.github.io （xxxx同样为用户名小写，不能出错）
  进入public目录
  复制远程库SSH地址，运行git remote add oringin SSH地址将本地库public与远程库xxxx.</description>
    </item>
    
    <item>
      <title>git远程仓库</title>
      <link>https://xxxxxie1997.github.io/post/3rd/</link>
      <pubDate>Sat, 11 Apr 2020 10:21:45 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/3rd/</guid>
      <description>git远程仓库的操作 听着是不难轮到自己操作着实迷惑了很久，同时也令我警觉起来，常言道万丈高楼平地起，打基础的时候可千万不能糊弄呀 （= n=）
将本地仓库的文件同步到远程仓库 首先到github建立新的远程仓库，得到SSH链接 切换到想要上传的目录下，在确定本地文件已提交后，运行git remote add 远程仓库名 SSH地址将本地仓库与远程仓库联系起来 运行git push -u 远程仓库名 SSH地址将本地库的当前分支上传至对应远程仓库 （如果要上传其他分支，通过git branch建立，git checkout切换至其它分支，再push）
这个操作只有第一次需要，后续上传只需运行git push即可
将远程仓库的文件同步到本地仓库 通过git clone 远程仓库名可以将远程仓库中的内容同步到本地仓库（所有分支）
容易忽视的问题：对文件的所有操作都需要标记后提交才会生效（包括文件的删除和重命名等）如果没有对所有的操作进行提交，便无法push，需要注意</description>
    </item>
    
    <item>
      <title>git本地仓库</title>
      <link>https://xxxxxie1997.github.io/post/2nd/</link>
      <pubDate>Fri, 10 Apr 2020 16:36:26 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/2nd/</guid>
      <description>首先还是从简单的指令开始学习的，这些指令理解起来同样没什么困难，真正的困难时容易在需要使用时想不起来应该使用哪一个，所以每过一段时间一定要多复习几次，得过且过就糟糕了
git init &amp;ndash;git命令的基础，初始化git，意为在初始目录下创建.git目录
（一定注意确保当前目录是所需目录，否则小朋友会有很多问号）
git add 路径 &amp;ndash;描述哪些路径是我所需要提交的
（可通过建立.gitignore文件来忽视对一些文件的描述，在该文件中输入需要忽视的文件名即可，这些文件不会被提交）
git commit -m 字符串 &amp;ndash;提交当前被描述过的文件并说明提交理由（字符串中有空格需引号括起来）
git commit -v &amp;ndash;使用-v会在提交之前回顾文件的改动。（推荐）
注意：一定要先描述哪些路径是需要提交的之后再提交，也就是需要先add后commit才行
（可通过git status查看文件当前状态，当前未描述会标红，反之标绿）
git reset --hard aaaaaa（aaaaaa为版本号，版本号没有固定长度，只需唯一即可） &amp;ndash;使用该命令可以在提交过的各个版本中左右横跳。
可以使用git log来查看提交后的版本，用git reflog查看版本的所有变动（包括改动后的版本）
注意：在reset --hard aaaaaa之前，一定要通过status查看当前文件描述状态，这些文件要么没有描述过，要么已经上传完成，如果是描述过但没有上传（也就是status标绿的状态）那么在reset后，这些文件将会消失
git branch X &amp;ndash;基于当前内容创建平行分支X（X为分支名），使用branch命令可以做到针对不同需求同时开发
git branch -d X &amp;ndash;删除X分支及其内容
git checkout X &amp;ndash;切换至之前创建的X分支最后一次提交的状态
若要切换回主线，只需git checkout master即可
git branch后不加参数可以查看当前所在分支以及分支数
git merge &amp;ndash;合并分支：
1.通过checkout切换至想要保留的分支（一般为master）
2.运行git merge 想要合并的分支名
注意：如果多条分支对同一文件的同一行进行了不同的修改，会导致冲突。命令行中的conflict提示一定要看，很关键
冲突的解决方法：
1.使用git status -sb查看到底是哪一个或哪些文件冲突
2.打开冲突的文件，在文件中搜索====，可以找到冲突位置
3.在====的上下两部分中选择需要保留的代码（当然全部保留也可以）
4.修改完后删除如&amp;laquo;&amp;laquo;、====、等用于提示冲突的多于代码
5.使用git add标记修改后的文件
6.再次使用git status -sb查看下一个冲突文件的文件名</description>
    </item>
    
    <item>
      <title>命令行入门</title>
      <link>https://xxxxxie1997.github.io/post/1st/</link>
      <pubDate>Fri, 10 Apr 2020 08:36:26 +0800</pubDate>
      
      <guid>https://xxxxxie1997.github.io/post/1st/</guid>
      <description>作为第一课相对来讲还是比较简单，不理解的东西较少。
第一天主要学习命令行各种命令缩写，含义，以及其在bash中如何使用
基础命令：
pwd &amp;ndash;当前目录绝对路径
ls &amp;ndash;当前路径内容
ls 路径名 &amp;ndash;查看指定路径所有文件
ls -a 路径名 &amp;ndash;指定路径全部内容（包括隐藏文件）
cat 路径 &amp;ndash;查看指定路径全部内容
head 路径 -n X（X为数字） &amp;ndash;查看指定路径前X行内容
tail 路径 -n X（X为数字） &amp;ndash;查看指定路径后X行内容
less 路径 &amp;ndash;以可滚动页面查看指定路径内容
clear &amp;ndash;清屏
touch 文件名 &amp;ndash;若当前目录没有该文件名文件，创建该文件，若有同名文件，更新其修改时间。
echo XXX（任意内容） &amp;gt;文件名 &amp;ndash;若目录中没有同名文件，创建该文件，并在文件内输入XXX，若有同名文件，会以XXX覆盖同名文件内容，需要注意
echo XXX &amp;gt;&amp;gt; 文件名 &amp;ndash;在该文件中添加XXX内容
echo -e &amp;quot;11111/n22222&amp;quot; &amp;gt;&amp;gt; 文件名 &amp;ndash; 在文件中添加两行内容，内容为：
“11111
22222”
其中，/n代表回车（换行）
mkdir 文件夹名 &amp;ndash;在当前路径下建立新文件夹
mkdir -p a/b/c a/d/c &amp;ndash;在当前目录下建立深层目录
以上面指令为例：此指令含义为在当前目录下简历a目录，在b、d目录下各建立一个c目录
cp &amp;ndash;copy即复制
例：
cp a.txt b.txt &amp;ndash;将a.txt中的内容复制到b.txt中</description>
    </item>
    
  </channel>
</rss>